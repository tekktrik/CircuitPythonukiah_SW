# SPDX-FileCopyrightText: 2022 Alec Delaney
#
# SPDX-License-Identifier: MIT

name: Build CI

on: [pull_request, push, workflow_dispatch]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Translate Repo Name For Build Tools filename_prefix
      id: repo-name
      run: |
        echo ::set-output name=repo-name::$(
        echo ${{ github.repository }} |
        awk -F '\/' '{ print tolower($2) }' |
        tr '_' '-'
        )
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Versions
      run: |
        python3 --version
    - name: Checkout current repo
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install dependencies
      run: |
        bash tools/install-reqs.sh
    - name: Pip install dev tools
      run: |
        pip install --force-reinstall -r requirements-dev.txt
    - name: Library version
      run: git describe --dirty --always --tags
    - name: Setup problem matchers
      uses: adafruit/circuitpython-action-library-ci-problem-matchers@v1
    - name: Pre-commit hooks
      run: |
        pre-commit run --all-files
    - name: Pip install test requirements
      run: |
        pip install -r requirements-test.txt
    - name: Test code
      run: |
        pytest --location ${{ secrets.location }}
    - name: Run MPY Action
      uses: tekktrik/build-mpy
      with:
        cpy-tag: "7.2.0"
        mpy-directory: "microcontroller"
  deploy-server:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install sshpass
      run: |
        sudo apt-get update -y
        sudo apt-get install -y sshpass
    - name: Checkout current repo
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Deploy to server
      run: |
        sshpass -p "${{ secrets.server_password }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r server ${{ secrets.server_location }}
        sshpass -p "${{ secrets.server_password }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null requirements-server.txt ${{ secrets.server_location }}
